@page.title: Language;
@page.author: Markdown;
@page.generated;


/* !!! DO NOT EDIT THIS PAGE !!!
   This page is auto-generated from doc/language.md. Any changes will be overwritten
   the next time the page is generated. Instead, edit doc/language.md directly.
*/

~sec [Language] {
    ~p {
        wikifier's source language is designed to be easily legible by the naked eye.
    }
    ~list {
        ~p {
            [[ Language | #language ]]
        }
        ~list {
            ~p {
                [[ Syntax | #syntax ]]
            }
            ~list {
                ~p {
                    [[ Comments | #comments ]]
                }
                ;
                ~p {
                    [[ Escaping | #escaping ]]
                }
                ;
                
            }
            ;
            ~p {
                [[ Blocks | #blocks ]]
            }
            ~list {
                ~p {
                    [[ Nameless blocks | #nameless-blocks ]]
                }
                ;
                ~p {
                    [[ Named blocks | #named-blocks ]]
                }
                ;
                ~p {
                    [[ Model shorthand | #model-shorthand ]]
                }
                ;
                ~p {
                    [[ Data types | #data-types ]]
                }
                ;
                
            }
            ;
            ~p {
                [[ Variables | #variables ]]
            }
            ~list {
                ~p {
                    [[ Assignment | #assignment ]]
                }
                ;
                ~p {
                    [[ Retrieval | #retrieval ]]
                }
                ;
                ~p {
                    [[ Formatted variables | #formatted-variables ]]
                }
                ;
                ~p {
                    [[ Attributes | #attributes ]]
                }
                ;
                ~p {
                    [[ Conditionals | #conditionals ]]
                }
                ;
                ~p {
                    [[ Interpolable variables | #interpolable-variables ]]
                }
                ;
                ~p {
                    [[ Special variables | #special-variables ]]
                }
                ;
                
            }
            ;
            ~p {
                [[ Text formatting | #text-formatting ]]
            }
            ~list {
                ~p {
                    [[ Basic formatting | #basic-formatting ]]
                }
                ;
                ~p {
                    [[ Variables | #variables-1 ]]
                }
                ;
                ~p {
                    [[ Links | #links ]]
                }
                ;
                ~p {
                    [[ References | #references ]]
                }
                ;
                ~p {
                    [[ Characters | #characters ]]
                }
                ;
                
            }
            ;
            
        }
        ;
        
    }
    ~sec [Syntax] {
        ~p {
            The wikifier source language is [[ parsed hierarchically | technical/parsing.md ]].
            The source is divided into components called [[ blocks | #blocks ]], each of which
            is responsible for parsing its inner contents. The master parser is
            concerned only with the most basic syntax\:
        }
        ~list {
            ~p {
                Dividing the source into [[ blocks | #blocks ]]
            }
            ;
            ~p {
                Stripping [[ comments | #comments ]]
            }
            ;
            ~p {
                [[ Variable assignment | #assignment ]]
            }
            ;
            ~p {
                [[ Conditionals | #conditionals ]]
            }
            ;
            
        }
        ~p {
            Further parsing is provided by\:
        }
        ~list {
            ~p {
                [[ Text formatter | #text-formatting ]]
            }
            ;
            ~p {
                [[ Map | blocks.md#map ]] base block type
            }
            ;
            ~p {
                [[ List | blocks.md#list ]] base block type
            }
            ;
            ~p {
                Additional block types may implement custom parsing
            }
            ;
            
        }
        ~sec [Comments] {
            ~p {
                C-style block comments are supported\:
            }
            ~code {
/* Some text */
}
~p {
                These can span multiple lines and be nested within each other\:
            }
            ~code {
/*
    Line one
    Line two has /* a nested comment */
*/
}

        }
        ~sec [Escaping] {
            ~p {
                Some characters must be escaped for literal use. The escape character ([c]\\[/c])
                denotes the character immediately following it as escaped.
            }
            ~p {
                [b]Anywhere[/b] in a document, these characters MUST be escaped for literal use\:
            }
            ~p {
                | Character | Reason for escape                 |
                | -----     | -----                             |
                | [c]\\[/c]       | Escape character                  |
                | [c]\{[/c]       | Starts a [[ block | #blocks ]]         |
                | [c]\}[/c]       | Terminates a [[ block | #blocks ]]     |
            }
            ~p {
                Within [[ [b]formatted text[/b] | #text-formatting ]], the following characters must be
                escaped in addition to those listed above\:
            }
            ~p {
                | Character | Reason for escape                                         |
                | -----     | -----                                                     |
                | [c]\[[/c]       | Starts a [[ text formatting | #text-formatting ]] token        |
                | [c]\][/c]       | Terminates a [[ text formatting | #text-formatting ]] token    |
            }
            ~p {
                Within [[ [b]maps[/b] | blocks.md#map ]] and [[ [b]lists[/b] | blocks.md#list ]], these
                characters must also be escaped\:
            }
            ~p {
                | Character | Must be escaped in                    | Reason for escape     |
                | -----     | -----                                 | -----                 |
                | [c]\;[/c]       | Map keys and values, list values      | Terminates a value    |
                | [c]\:[/c]       | Map keys                              | Terminates a key      |
            }
            ~p {
                [b]Brace-escape[/b]. Sometimes it may be desirable to disable all parsing within a
                particular block. This is especially useful for things like
                [[ [c]code\{\}[/c] | blocks.md#code ]], [[ [c]html\{\}[/c] | blocks.md#html ]], and
                [[ [c]format\{\}[/c] | blocks.md#format ]] because then you do not have to escape every
                instance of special characters like [c]\{[/c], [c]\}[/c], and [c]\\[/c]. It works as long as there
                is a closing bracket [c]\{[/c] to correspond with every opening bracket [c]\}[/c]. To enable
                brace-escape mode, open and close the block with double curly brackets\:
            }
            ~code [javascript] {
code \{\{
    ae.removeLinesInRanges = function (ranges) \{
        if (!ranges || !ranges.length)
            return;
        for (var i = biggest; i >= smallest; i--) \{
            if (!rows[i]) \{
                if (typeof lastLine != 'undefined') \{
                    editor.session.doc.removeFullLines(i + 1, lastLine);
                    lastLine = undefined;
                \}
                continue;
            \}
            if (typeof lastLine == 'undefined') lastLine = i;
        \}
    \};
\}\}
}

        }
        
    }
    ~sec [Blocks] {
        ~p {
            The fundamental component of the wikifier language is the [b]block[/b].
            The syntax for a block is as follows\:
        }
        ~code {
Type [Name] \{ Content \}
}
~list {
            ~p {
                [b]Type[/b] - The kind of block. The block type provides a unique
                function. For instance, [[ [c]imagebox\{\}[/c] | blocks.md#imagebox ]] displays a bordered
                image with a caption and link to the full size original.
            }
            ;
            ~p {
                [b]Name[/b] - Depending on its type, a block may have a name. Each block type
                may use the name field for a different purpose. For example,
                [[ [c]infobox\{\}[/c] | blocks.md#infobox ]] uses the field to display a title bar across
                the top of the info table.
            }
            ;
            ~p {
                [b]Content[/b] - Inside the block, there may be additional blocks and/or text.
                Each block handles the content within differently. Some may treat it as
                plain text, while others may do further parsing on it.
            }
            ;
            
        }
        ~p {
            See [[ Blocks | blocks.md ]] for a list of built-in block types.
        }
        ~sec {
            ~sec [Nameless blocks] {
                ~p {
                    The [c]\[block name\][/c] field may be omitted for block types that do not require it.
                }
                ~code {
blocktype \{
    ...
\}
}
~p {
                    Example
                }
                ~code {
imagebox \{
    desc:   [[Foxy]], supreme librarian;
    align:  left;
    file:   foxy2.png;
    width:  100px;
\}
}

            }
            ~sec [Named blocks] {
                ~p {
                    For block types that support a [c]\[block name\][/c] field, it should follow the block
                    type and be delimited by square brackets [c]\[[/c] and [c]\][/c]. The name field may
                    contain additional square brackets inside it without the need for the escape
                    character ([c]\\[/c]) as long as the number of opening brackets and closing brackets
                    are equal. Otherwise, they must be escaped.
                }
                ~code {
blocktype [block name] \{
    ...
\}
}
~p {
                    Example
                }
                ~code {
sec [Statistics] \{
    NoTrollPlzNet Library's online division currently hosts
    [@stats.site.articles] articles.
\}
}

            }
            ~sec [Model shorthand] {
                ~p {
                    wikifier has a special syntax for using [[ [b]models[/b] | models.md ]]. Write them like
                    any block, except prefix the model name with a dollar sign ([c]$[/c]).
                }
                ~code {
$my_model \{
    option1: Something;
    option2: Another option;
\}
}
~p {
                    Note\: From within the model source, those options can be retrieved with
                    [c]@m.option1[/c] and [c]@m.option2[/c].
                }
                ~p {
                    Same as writing the long form\:
                }
                ~code {
model [my_model] \{
    option1: Something;
    option2: Another option;
\}
}

            }
            ~sec [Data types] {
                ~p {
                    [[ [c]map\{\}[/c] | blocks.md#map ]] provides a key-value map datatype. It serves as the
                    base of many other block types. Likewise, [[ [c]list\{\}[/c] | blocks.md#list ]] provides an
                    array datatype.
                }
                
            }
            
        }
        
    }
    ~sec [Variables] {
        ~p {
            wikifier supports string, boolean, and block variables.
        }
        ~sec [Assignment] {
            ~p {
                [b]String[/b] variables look like this\:
            }
            ~code {
@some_variable:     The value;
@another_variable:  You can escape semicolons\\; I think;
}
~p {
                [b]Boolean[/b] variables look like this\:
            }
            ~code {
@some_bool;     /* true  */
-@some_bool;    /* false */
}
~p {
                [b]Block[/b] variables look like this\:
            }
            ~code {
@my_box: infobox [United States of America] \{
    Declaration:    1776;
    States:         50;
\};
}

        }
        ~sec [Retrieval] {
            ~p {
                Once variables are assigned, they are typically used in
                [[ formatted text | #text-formatting ]] or [[ conditionals | #conditionals ]]. You can use
                variables anywhere that formatted text is accepted like this\:
            }
            ~code {
sec \{
    This is a paragraph inside a section. I am allow to use [b]bold text[/b],
    as well as [@variables].
\}
}
~p {
                If the variable contains a block, you can display it using [c]\{@var_name\}[/c]. This
                syntax works anywhere, not just in places where formatted text is accepted
                like with the [c]\[@var_name\][/c] syntax. So if you have\:
            }
            ~code {
@my_box: infobox [United States of America] \{
    Declaration:    1776;
    States:         50;
\};
}
~p {
                You would display the infobox later using\:
            }
            ~code {
\{@my_box\}
}

        }
        ~sec [Formatted variables] {
            ~p {
                By the way, you can use text formatting within string variables, including other
                embedded variables\:
            }
            ~code {
@site:      [b]MyWiki[/b];
@name:      John;
@welcome:   Welcome to [@site], [@name].
}
~p {
                If you don't want that to happen, take a look at
                [[ interpolable variables | #interpolable-variables ]], the values of which are
                formatted upon retrieval rather than at the time of assignment.
            }
            
        }
        ~sec [Attributes] {
            ~p {
                Variables can have [b]attributes[/b]. This helps to organize things\:
            }
            ~code {
@page.title:    Hello World!;
@page.author:   John Doe;
}
~p {
                You don't have to worry about whether a variable exists to define attributes on
                it. A new [[ [c]map\{\}[/c] | blocks.md#map ]] will be created on the fly if necessary
                (in the above example, [c]@page[/c] does not initially exist, but an empty map is
                allocated automatically).
            }
            ~p {
                Some block types support attribute fetching and/or setting\:
            }
            ~code {
/* define the infobox in a variable so we can access attributes */
@person: infobox [Britney Spears] \{
    First name:     Britney;
    Last name:      Spears;
    Age:            35;
\};

/* display the infobox */
\{@person\}

/* access attributes from it elsewhere
   btw this works for all map-based block types */
sec \{
    Did you know that [@person.First_name] [@person.Last_name] is
    [@person.Age] years old?
\}
}
~p {
                Some data types may not support attributes at all. Others might only support
                certain attributes. For example, [[ [c]list\{\}[/c] | blocks.md#list ]] only allows
                numeric indices.
            }
            ~code {
@alphabet: list \{
    a;
    b;
    c;
    ... the rest;
\};

sec \{
    Breaking News: [@alphabet.0] is the first letter of the alphabet,
    and [@alphabet.25] is the last.
\}
}

        }
        ~sec [Conditionals] {
            ~p {
                You can use the [b]conditional blocks[/b] [c]if\{\}[/c], [c]elsif\{\}[/c], and [c]else\{\}[/c] on
                variables. Currently all that can be tested is the boolean value of a variable.
                Boolean and block variables are always true, and all strings besides zero are
                true.
            }
            ~code {
if [@page.draft] \{
    Note to self: Don't forget to publish this page.
\}
else \{
    Thanks for checking out my page.
\}
}

        }
        ~sec [Interpolable variables] {
            ~p {
                [b]Interpolable variables[/b] (with the [c]%[/c] sigil) allow you to evaluate the
                formatting of a string variable at some point after the variable was defined.
            }
            ~p {
                Normally the formatting of string variables is evaluated immediately as the
                variable is defined.
            }
            ~code {
@another_variable: references other variables;
@my_text: This string variable has [b]bold text[/b] and [@another_variable];
/* ok, @my_text now is:
   This string variable has <strong>bold text</strong> and references
   other variables
*/
}
~p {
                Interpolate variables are different in that their contents
                are evaluated as they are accessed rather than as they are defined.
            }
            ~code {
@another_variable: references other variables;
%my_text: This string variable has [b]bold text[/b] and [@another_variable];
/* ok, @my_text now is:
   This string variable has [b]bold text[/b] and [@another_variable];
*/
}
~p {
                Now the variable is defined with the formatting still unevaluated, so
                accessing it as [c]\[@my_text\][/c] would display the raw formatting code. Instead,
                we use [c]\[%my_text\][/c] to display it which tells the parser to format the
                contents of the variable as we retrieve its value.
            }
            ~p {
                Whether you defined the variable with [c]@[/c] or [c]%[/c] sigil does not concern the
                parser. Therefore if you do something like\:
            }
            ~code {
@my_text: This string variable has [b]bold text[/b];
}
~p {
                and then try to display it with [c]\[%my_text\][/c], the variable will be
                double-formatted, resulting in ugly escaped HTML tags visible to clients.
            }
            
        }
        ~sec [Special variables] {
            ~p {
                [c]@page[/c] contains information about the current page. Its attributes are set
                at the very top of a page source file.
            }
            ~list {
                ~p {
                    [c]@page.title[/c] - Human-readable page title. Utilized internally by the
                    Wikifier, so it is required for most purposes. Often used as the [c]<title>[/c] of
                    the page, as well as in the [c]<h1>[/c] above the first [c]section\{\}[/c] block. The
                    title can contain [[ formatted text | #text-formatting ]], but it may be stripped
                    down to plaintext in certain places.
                }
                ;
                ~p {
                    [c]@page.created[/c] - UNIX timestamp or HTTP date format of the page creation
                    time. This is not used in the wikifier itself, but can be used in frontends
                    for sorting the page list by creation date.
                }
                ;
                ~p {
                    [c]@page.author[/c] - Name of the page author. This is also optional but may be
                    used by frontends to organize pages by author.
                }
                ;
                ~p {
                    [c]@page.draft[/c] - [[ Boolean | #assignment ]] value which marks the page as a draft.
                    This means that it will not be served to unauthenticated users.
                }
                ;
                ~p {
                    [c]@page.redirect[/c] - Page redirect target. All [[ link types | #links ]] are
                    supported, including pages, categories, external wiki links, and external
                    site links.
                }
                ;
                ~p {
                    [c]@page.enable[/c] - Contains [[ boolean | #assignment ]] attributes which allow you to
                    enable or disable certain features specific to the page.
                }
                ~list {
                    ~p {
                        [c]@page.enable.title[/c] - Whether to display the page title (from
                        [c]@page.title[/c]) as the header of the first [c]section\{\}[/c] block if no other
                        section title is specified. This assumes that the first section is an
                        introduction, so it will have the highest header level. Overrides the
                        wiki configuration option
                        [[ page.enable.title | configuration.md#pageenabletitle ]].
                    }
                    ;
                    
                }
                ;
                
            }
            ~p {
                [c]@category[/c] is used to mark the page as belonging to a category. Each
                attribute of it is a boolean. If present, the page belongs to that category.
                Example\:
            }
            ~list {
                ~p {
                    [c]@category.news\;[/c]
                }
                ;
                ~p {
                    [c]@category.important\;[/c]
                }
                ;
                
            }
            ~p {
                [c]@m[/c] is a special variable used in [[ models | models.md ]]. Its attributes are
                mapped to any options provided in the model block.
            }
            
        }
        
    }
    ~sec [Text formatting] {
        ~p {
            Many block types, as well as values in [[ variable assignment | #assignment ]], can
            contain [b]formatted text[/b]. Square brackets [c]\[[/c] and [c]\][/c] are used to delimit text
            formatting tokens.
        }
        ~sec [Basic formatting] {
            ~list {
                ~p {
                    [c]\[b\]bold text\[/b\][/c] - [b]bold text[/b]
                }
                ;
                ~p {
                    [c]\[s\]strikethrough text\[/s\][/c] - ~~strikethrough text~~
                }
                ;
                ~p {
                    [c]\[i\]italicized text\[/i\][/c] - [i]italicized text[/i]
                }
                ;
                ~p {
                    [c]\[c\]inline code\[/c\][/c] - [c]inline code[/c]
                }
                ;
                ~p {
                    [c]superscript\[^\]text\[/^\][/c] - superscript~html {<sup>}text~html {</sup>}
                }
                ;
                ~p {
                    [c]subscript\[v\]text\[/v\][/c] - subscript~html {<sub>}text~html {</sub>}
                }
                ;
                ~p {
                    [c]\[aquamarine\]some colored text by color name\[/\][/c]
                }
                ;
                ~p {
                    [c]\[#ff1337\]some colored text by hex code\[/\][/c]
                }
                ;
                
            }
            
        }
        ~sec [Variables] {
            ~list {
                ~p {
                    [c]\[@some.variable\][/c] - normal variable
                }
                ;
                ~p {
                    [c]\[%some.variable\][/c] - interpolable variable
                }
                ;
                ~p {
                    See [[ Variables | #variables ]] above
                }
                ;
                
            }
            
        }
        ~sec [Links] {
            ~list {
                ~p {
                    [c]\[\[ Page name \]\][/c] - internal wiki page link
                }
                ;
                ~p {
                    [c]\[\[ wp\: Page name \]\][/c] - [[ external wiki | configuration.md#external ]] page link
                }
                ;
                ~p {
                    [c]\[\[ ~ Cat name \]\][/c] - category link
                }
                ;
                ~p {
                    [c]\[\[ http\://google.com \]\][/c] - external site link
                }
                ;
                ~p {
                    For any link type, you can change the display text\:
                    [c]\[\[ Google | http\://google.com \]\][/c]
                }
                ;
                
            }
            
        }
        ~sec [References] {
            ~list {
                ~p {
                    [c]\[ref\][/c] - a fake reference. just to make your wiki look credible.
                }
                ;
                ~p {
                    [c]\[1\][/c] - an actual reference number. a true reference.
                }
                ;
                
            }
            
        }
        ~sec [Characters] {
            ~list {
                ~p {
                    [c]\[nl\][/c] - a line break
                }
                ;
                ~p {
                    [c]\[--\][/c] - an en dash
                }
                ;
                ~p {
                    [c]\[---\][/c] - an em dash
                }
                ;
                ~p {
                    [c]\[&copy\][/c] - HTML entities by name
                }
                ;
                ~p {
                    [c]\[&#34\][/c] - HTML entities by number
                }
                ;
                
            }
            
        }
        
    }
    
}

