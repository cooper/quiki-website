@page.title: wikiserver commands;
@page.author: Markdown;
@page.generated;


/* !!! DO NOT EDIT THIS PAGE !!!
   This page is auto-generated from doc/technical/server-commands.md. Any changes will be overwritten
   the next time the page is generated. Instead, edit doc/technical/server-commands.md directly.
*/

~sec [wikiserver commands] {
    ~p {
        This is the list of commands supported by the wikiserver.
    }
    
}
~sec [Authentication] {
    ~p {
        These authentication commands are available to anonymous connections.
    }
    ~sec [wiki] {
        ~p {
            Authenticates the connection for read access to a particular wiki.
        }
        ~code {
C: ["wiki",\{"config":true,"name":"mywiki","password":"secret"\},3]
S: ["wiki",\{"config":\{"root":\{"page":"/page","image":"/file"\}\}\},3]
}
~list {
            ~p {
                [b]name[/b] - wiki name.
            }
            ;
            ~p {
                [b]password[/b] - wiki password for read authentication in plain text.
            }
            ;
            ~p {
                [b]config[/b] - [i]optional[/i], if true, the wiki configuration is returned.
                otherwise, a successful authentication has no reply.
            }
            ;
            
        }
        ~p {
            [c]wiki[/c] has no response unless [b]config[/b] is true.
        }
        
    }
    ~sec [select] {
        ~p {
            After authenticating for multiple wikis with the [[ [c]wiki[/c] | #wiki ]] command,
            [c]select[/c] is used to switch between them without having to send the password
            again.
        }
        ~code {
S: ["select",\{"name":"mywiki"\},6]
}
~list {
            ~p {
                [b]name[/b] - wiki name.
            }
            ;
            
        }
        ~p {
            Response
        }
        ~list {
            ~p {
                [b]name[/b] - same wiki name, to verify a successful switch.
            }
            ;
            
        }
        
    }
    ~sec [login] {
        ~p {
            Authenticates the connection for write access to a particular wiki.
        }
        ~list {
            ~p {
                [b]username[/b] - username for write authentication.
            }
            ;
            ~p {
                [b]password[/b] - password for write authentication in plain text.
            }
            ;
            ~p {
                [b]session_id[/b] - [i]optional[/i],
            }
            ;
            
        }
        ~p {
            Response
        }
        ~list {
            ~p {
                [b]logged_in[/b] - true if successful.
            }
            ;
            ~p {
                [b]conf[/b] - [i]deprecated[/i], wiki configuration.
            }
            ;
            ~p {
                user metadata - any or none of these may be present
            }
            ~list {
                ~p {
                    [b]name[/b] - user's full name.
                }
                ;
                ~p {
                    [b]email[/b] - user's email address.
                }
                ;
                
            }
            ;
            
        }
        
    }
    ~sec [resume] {
        ~p {
            If a session ID was provided to the [[ [c]login[/c] | #login ]] command, [c]resume[/c] can be
            used in place of [c]login[/c] on subsequent connections, providing only the session
            ID instead of sending the login credentials again.
        }
        ~p {
            The wikiserver may choose to deny the session ID due to old age or any other
            reason, in which case the frontend should redirect the user to login again.
        }
        ~list {
            ~p {
                [b]session_id[/b] - session identifier which was provided to [[ [c]login[/c] | #login ]]
                when the user initially authenticated for write access.
            }
            ;
            
        }
        ~p {
            A successful [c]resume[/c] has no response.
        }
        
    }
    
}
~sec [Read-required] {
    ~p {
        These commands are available to connections which have authenticated for read
        access.
    }
    ~sec [page] {
        ~p {
            Returns the generated HTML and CSS content for a page as well as additional
            metadata.
        }
        ~code {
C: ["page",\{"name":"welcome"\},5]
S: ["page",\{"content":"<!-- cached page dated Sun, 16 Apr 2017 16:52:33 GMT -->","type":"page","path":"/home/www/mywiki/pages/welcome.page","file":"welcome.page","fmt_title":"Welcome to My Wiki!","title":"Welcome to My Wiki!","mime":"text/html","cached":"1","mod_unix":"1492361553","name":"welcome","warnings":["Line 18:30: Page target 'about' does not exist"],"author":"John Doe","created":"1484537057","modified":"Sun, 16 Apr 2017 16:52:33 GMT"\},5]
}
~p {
            Response
        }
        ~list {
            ~p {
                [b]type[/b] - type of response, one of [c]not found[/c], [c]redirect[/c], or [c]page[/c].
            }
            ;
            
        }
        ~code {
#   for type 'not found':
#
#       error           a human-readable error string. sensitive info is never
#                       included, so this may be shown to users
#
#       (parse_error)   true if the error occurred during parsing
#
#       (draft)         true if the page cannot be displayed because it has not
#                       yet been published for public viewing
#
#   for type 'redirect':
#
#       redirect        a relative or absolute URL to which the page should
#                       redirect, suitable for use in a Location header
#
#       file            basename of the page, with the extension. this is not
#                       reliable for redirects, as it may be either the name of
#                       this page itself or that of the redirect page
#
#       name            basename of the page, without the extension. like 'file'
#                       this is not well-defined for redirects
#
#       path            absolute file path of the page. like 'file' this is not
#                       well-defined for redirects
#
#       mime            'text/html' (appropriate for Content-Type header)
#
#       content         a link to the redirect target, which normally will not
#                       be displayed, but may if the frontend does not support
#                       the 'redirect' type
#
#   for type 'page':
#
#       file            basename of the page, with the extension
#
#       name            basename of the page, without the extension
#
#       path            absolute file path of the page
#
#       mime            'text/html' (appropriate for Content-Type header)
#
#       content         the page content (HTML)
#
#       mod_unix        UNIX timestamp of when the page was last modified.
#                       if 'cache_gen' is true, this is the current time.
#                       if 'cached' is true, this is the modified date of the
#                       cache file. otherwise, this is the modified date of the
#                       page file itself
#
#       modified        like 'mod_unix' except in HTTP date format, suitable for
#                       use in the Last-Modified header
#
#       (css)           CSS generated for the page from style\{\} blocks. omitted
#                       when the page does not include any styling
#
#       (cached)        true if the content being served was read from a cache
#                       file (opposite of 'generated')
#
#       (generated)     true if the content being served was just generated in
#                       order to fulfill this request (opposite of 'cached')
#
#       (cache_gen)     true if the content generated in order to fulfill this
#                       request was written to a cache file for later use. this
#                       can only be true if 'generated' is true
#
#       (text_gen)      true if this request resulted in the generation of a
#                       text file based on the contents of this page
#
#       (draft)         true if the page has not yet been published for public
#                       viewing. this only ever occurs if the 'draft_ok' option
#                       was used; otherwise result would be of type 'not found'
#
#       (warnings)      an array reference of warnings produced by the parser.
#                       omitted when no warnings were produced
#
#       (created)       UNIX timestamp of when the page was created, as
#                       extracted from the special @page.created variable.
#                       ommitted when @page.created is not set
#
#       (author)        name of the author of the page, as extracted from the
#                       special @page.author variable. omitted when
#                       @page.author is not set
#
#       (categories)    array reference of categories the page belongs to. these
#                       do not include the '.cat' extension. omitted when the
#                       page does not belong to any categories
#
#       (fmt_title)     the human-readable page title, as extracted from the
#                       special @page.title variable, including any possible
#                       HTML-encoded text formatting. omitted when @page.title
#                       is not set
#
#       (title)         like 'fmt_title' except that all formatting has been
#                       stripped. suitable for use in the <title> tag. omitted
#                       when @page.title is not set
}

    }
    ~sec [page_code] {
        ~p {
            Returns the wiki source code of a page.
        }
        ~list {
            ~p {
                [b]name[/b]\: page filename.
            }
            ;
            ~p {
                [b]display_page[/b]\: [i]optional[/i], if [c]1[/c], also include the result of
                [[ [c]page[/c] | #page ]] as the [c]display_page[/c] key in the response. the page content is
                omitted. if [c]2[/c], also include the content.
            }
            ;
            
        }
        ~p {
            Response
        }
        ~list {
            ~p {
                [b]file[/b] - filename of the page, including extension.
            }
            ;
            ~p {
                [b]path[/b] - absolute path to the page on the filesystem.
            }
            ;
            ~p {
                [b]content[/b] - wiki source code for the page.
            }
            ;
            ~p {
                [b]mime[/b] - [c]text/plain[/c] (appropriate for Content-Type header)
            }
            ;
            ~p {
                [b]type[/b] - [c]page_code[/c]
            }
            ;
            
        }
        
    }
    ~sec [page_list] {
        ~p {
            Returns metadata for all pages in the wiki, suitable for displaying a page
            list.
        }
        ~list {
            ~p {
                [b]sort[/b] - [[ how to sort | #sort-options ]] the page list.
            }
            ;
            
        }
        ~p {
            Response
        }
        ~list {
            ~p {
                [b]TODO[/b]
            }
            ;
            
        }
        
    }
    ~sec [model_code] {
        ~p {
            Returns the wiki source code of a model.
        }
        ~list {
            ~p {
                [b]name[/b]\: model filename.
            }
            ;
            ~p {
                [b]display_page[/b]\: [i]optional[/i], if [c]1[/c], also include the result of
                [[ [c]page[/c] | #page ]] as the [c]display_page[/c] key in the response. the model content
                is omitted. if [c]2[/c], also include the content.
            }
            ;
            
        }
        ~p {
            Response
        }
        ~list {
            ~p {
                [b]file[/b] - filename of the model, including extension.
            }
            ;
            ~p {
                [b]path[/b] - absolute path to the model on the filesystem.
            }
            ;
            ~p {
                [b]content[/b] - wiki source code for the model.
            }
            ;
            ~p {
                [b]mime[/b] - [c]text/plain[/c] (appropriate for Content-Type header)
            }
            ;
            ~p {
                [b]type[/b] - [c]model_code[/c]
            }
            ;
            
        }
        
    }
    ~sec [model_list] {
        ~p {
            Returns metadata for all models in the wiki, suitable for displaying a model
            list.
        }
        ~list {
            ~p {
                [b]sort[/b] - [[ how to sort | #sort-options ]] the model list.
            }
            ;
            
        }
        ~p {
            Response
        }
        ~list {
            ~p {
                [b]TODO[/b]
            }
            ;
            
        }
        
    }
    ~sec [image] {
        ~p {
            Returns the metadata for an image, including an absolute path on the filesystem.
            The image data itself is NOT transmitted over the wikiserver transport\; instead,
            the frontend should serve the image file directly from the [c]path[/c] specified
            in the response.
        }
        ~code {
C: ["image",\{"name":"200x200-the_crew@2x.jpg"\},22]
S: ["image",\{"file":"the_crew.jpg","cached":"1","mime":"image/jpeg","length":"133566","cache_path":"/home/www/mywiki/cache/400x400-the_crew.jpg","path":"/home/www/mywiki/cache/400x400-the_crew.jpg","type":"image","image_type":"jpeg","modified":"Sun, 16 Apr 2017 16:52:32 GMT","mod_unix":"1492361552","fullsize_path":"/home/www/mywiki/images/the_crew.jpg"\},22]
}
~list {
            ~p {
                [b]name[/b] - image filename.
            }
            ;
            ~p {
                [b]width[/b] - [i]optional[/i], desired image width.
            }
            ;
            ~p {
                [b]height[/b] - [i]optional[/i], desired image height.
            }
            ;
            
        }
        ~p {
            Response
        }
        ~code {
#   for type 'image':
#
#       file            basename of the scaled image file
#
#       path            absolute path to the scaled image. this file should be
#                       served to the user
#
#       fullsize_path   absolute path to the full-size image. if the full-size
#                       image is being displayed, this is the same as 'path'
#
#       image_type      'png' or 'jpeg'
#
#       mime            'image/png' or 'image/jpeg', suitable for the
#                       Content-Type header
#
#       length          bytelength of image data, suitable for use in the
#                       Content-Length header
#
#       mod_unix        UNIX timestamp of when the image was last modified.
#                       if 'generated' is true, this is the current time.
#                       if 'cached' is true, this is the modified date of the
#                       cache file. otherwise, this is the modified date of the
#                       image file itself
#
#       modified        like 'mod_unix' except in HTTP date format, suitable for
#                       use in the Last-Modified header
#
#       (cached)        true if the content being served was read from a cache
#                       file (opposite of 'generated')
#
#       (generated)     true if the content being served was just generated in
#                       order to fulfill this request (opposite of 'cached')
#
#       (cache_gen)     true if the content generated in order to fulfill this
#                       request was written to a cache file for later use. this
#                       can only be true if 'generated' is true
#
#   for type 'not found':
#
#       error           a human-readable error string. sensitive info is never
#                       included, so this may be shown to users
#
}

    }
    ~sec [image_list] {
        ~p {
            Returns metadata for all images in the wiki, suitable for displaying an image
            list.
        }
        ~list {
            ~p {
                [b]sort[/b] - [[ how to sort | #sort-options ]] the image list.
            }
            ;
            
        }
        ~p {
            Response
        }
        ~list {
            ~p {
                [b]TODO[/b]
            }
            ;
            
        }
        
    }
    ~sec [cat_posts] {
        ~p {
            Returns a collection of pages which belong to a particular category, including
            their metadata, generated HTML, and generated CSS contents. This is suitable for
            displaying several related pages at once. The results may be paginated.
        }
        
    }
    ~sec [cat_list] {
        ~p {
            Returns metadata for all categories in the wiki, suitable for displaying a
            category list.
        }
        ~list {
            ~p {
                [b]sort[/b] - [[ how to sort | #sort-options ]] the category list.
            }
            ;
            
        }
        ~p {
            Response
        }
        ~list {
            ~p {
                [b]TODO[/b]
            }
            ;
            
        }
        
    }
    
}
~sec [Write-required] {
    ~p {
        These commands are available to connections which have authenticated for write
        access.
    }
    ~sec [page_save] {
        ~p {
            Writes wiki source code to a page file. The page file may or may not already
            exist. The changes are committed to the wiki revision tracker. The page
            is immediately regenerated upon save.
        }
        
    }
    ~sec [page_del] {
        ~p {
            Deletes a page file. The changes are committed to the wiki revision tracker.
        }
        
    }
    ~sec [page_move] {
        ~p {
            Renames a page file. The changes are committed to the wiki revision tracker.
        }
        
    }
    ~sec [model_save] {
        ~p {
            Writes wiki source code to a model file. The model file may or may not already
            exist. The changes are committed to the wiki revision tracker.
        }
        
    }
    ~sec [model_del] {
        ~p {
            Deletes a model file. The changes are committed to the wiki revision tracker.
        }
        
    }
    ~sec [model_move] {
        ~p {
            Renames a model file. The changes are committed to the wiki revision tracker.
        }
        
    }
    ~sec [cat_del] {
        ~p {
            Deletes a category. The changes are committed to the wiki revision tracker.
        }
        
    }
    ~sec [ping] {
        ~p {
            Used by frontends to verify that a session is still active. Also, notifications
            from the wikiserver may be delivered in reply.
        }
        
    }
    
}
~sec [Sort options] {
    ~list {
        ~p {
            [c]a+[/c] - alphabetically by title ascending (a-z)
        }
        ;
        ~p {
            [c]a-[/c] - alphabetically by title descending (z-a)
        }
        ;
        ~p {
            [c]c+[/c] - by creation time ascending (oldest first)
        }
        ;
        ~p {
            [c]c-[/c] - by creation time descending (recent first)
        }
        ;
        ~p {
            [c]d+[/c] - by dimensional area ascending (images only)
        }
        ;
        ~p {
            [c]d-[/c] - by dimensional area descending (images only)
        }
        ;
        ~p {
            [c]m+[/c] - by modification time ascending (oldest first)
        }
        ;
        ~p {
            [c]m-[/c] - by modification time descending (recent first)
        }
        ;
        ~p {
            [c]u+[/c] - alphabetically by author ascending (a-z)
        }
        ;
        ~p {
            [c]u-[/c] - alphabetically by author descending (z-a)
        }
        ;
        
    }
    
}

